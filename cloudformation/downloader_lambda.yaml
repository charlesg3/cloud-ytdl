AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Lambda function using ytdlp-downloader container'

Parameters:
  ECRRepositoryName:
    Type: String
    Default: "ytdlp-downloader-lambda"
    Description: Name of the ECR repository containing the ytdlp-downloader image
  
  ECRImageTag:
    Type: String
    Default: "latest"
    Description: Tag of the Docker image to use
  
  LambdaFunctionName:
    Type: String
    Default: "ytdlp-downloader-lambda"
    Description: Name of the Lambda function
  
  LambdaMemorySize:
    Type: Number
    Default: 1024
    Description: Memory size for the Lambda function (MB)
  
  LambdaTimeout:
    Type: Number
    Default: 300
    Description: Timeout for Lambda function execution (seconds)
  
  S3BucketName:
    Type: String
    Default: "cloudytdl-20250330150643"
    Description: S3 bucket for storing downloaded files
  
Resources:
  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${LambdaFunctionName}-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        # Access to S3 bucket
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource: !Sub 'arn:aws:s3:::${S3BucketName}'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:PutObjectAcl
                Resource: !Sub 'arn:aws:s3:::${S3BucketName}/*'
        # Access to ECR images
        - PolicyName: ECRAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepositoryName}'
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
  
  # Lambda function using the container image
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Description: "Lambda function that runs ytdlp-downloader container to download and convert videos"
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}:${ECRImageTag}"
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      Environment:
        Variables:
          S3_BUCKET: !Ref S3BucketName
          OUTPUT_DIR: "/data"
          # Placeholder for VIDEO_ID - to be provided when invoking the function
      EphemeralStorage:
        Size: 1024  # Maximum ephemeral storage (10 GB) for large downloads

  # CloudWatch Log Group for Lambda with a retention period
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionName}"
      RetentionInDays: 30

Outputs:
  LambdaFunctionName:
    Description: Name of the created Lambda function
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionName"
  
  LambdaFunctionArn:
    Description: ARN of the created Lambda function
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"
  
  InvocationCommand:
    Description: Command to invoke the Lambda function
    Value: !Sub |
      aws lambda invoke --function-name ${LambdaFunctionName} \
        --payload '{"videoId":"YOUR_VIDEO_ID"}' \
        response.json
